# .github/workflows/main_pipeline.yml
name: ProductionPipeline
env:
    NODE_ENV: test
    CYPRESS_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_GOOGLE_CLIENT_ID }}
    CYPRESS_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_GOOGLE_CLIENT_SECRET }}
    CYPRESS_GOOGLE_REFRESH_TOKEN: ${{ secrets.CYPRESS_GOOGLE_REFRESH_TOKEN }}
on:
    push:
        branches: [main]
    workflow_dispatch:
jobs:
    tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: '12.x'
                  cache: 'npm'
            - name: Install Dependencies
              run: |
                  npm ci
            - name: Run Unit Tests
              run: npm run test
    acceptance-tests:
        runs-on: ubuntu-latest
        needs: tests
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Install Dependencies
              run: npm ci
            - name: Run Acceptance Tests
              uses: cypress-io/github-action@v2
              with:
                  build: npm run build
                  start: npm start
    build:
        needs: acceptance-tests
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET }}
                  aws-region: us-west-2
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Build, Tag, and Push Image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
